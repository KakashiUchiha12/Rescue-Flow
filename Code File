#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

#define MAX_ZONES 11 // 10 cities + 1 aid center
#define MAX_ITEMS 5
#define INF INT_MAX

// Structure to represent aid package requirements for a zone
typedef struct AidPackage {
    char itemName[50];
    int quantity;
} AidPackage;

// Structure to represent a Zone (Disaster Zone or Aid Center)
typedef struct Zone {
    int id;
    char name[50];
    int severity;  // Priority (higher number means more severe)
    int weatherFactor;  // Weather adjustment (0 = normal, 1 = rain, 2 = snow, 3 = storm)
    int distanceFromAidCenter; // Shortest path distance from aid center
    AidPackage aidPackages[MAX_ITEMS]; // Aid packages required
    int numAidPackages; // Number of aid packages required
} Zone;

// Structure for Queue (used for aid dispatching)
typedef struct Queue {
    int front, rear;
    Zone *zones[MAX_ZONES];
} Queue;

// Structure to represent Relief Item (food, medical, etc.)
typedef struct ReliefItem {
    char name[50];
    int quantity;
} ReliefItem;

// Hash Table for storing inventory (relief materials)
typedef struct HashTable {
    ReliefItem items[MAX_ITEMS];
} HashTable;

// Function to initialize a queue
void initQueue(Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if queue is full
int isFull(Queue *q) {
    return q->rear == MAX_ZONES - 1;
}

// Function to check if queue is empty
int isEmpty(Queue *q) {
    return q->front == -1;
}

// Function to enqueue a zone (add to dispatch queue)
void enqueue(Queue *q, Zone *zone) {
    if (isFull(q)) {
        printf("Queue is full. Cannot dispatch aid to more zones.\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->rear++;
    q->zones[q->rear] = zone;
}

// Function to dequeue a zone (dispatch aid to zone)
Zone* dequeue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. No zones to dispatch aid.\n");
        return NULL;
    }
    Zone *zone = q->zones[q->front];
    q->front++;
    if (q->front > q->rear) {
        q->front = q->rear = -1;
    }
    return zone;
}

// Function to add or update a relief item in the inventory
void addItem(HashTable *table, char *name, int quantity) {
    for (int i = 0; i < MAX_ITEMS; i++) {
        if (strcmp(table->items[i].name, name) == 0 && table->items[i].quantity > 0) {
            table->items[i].quantity += quantity;
            return;
        }
    }
    for (int i = 0; i < MAX_ITEMS; i++) {
        if (table->items[i].quantity == 0) {
            strcpy(table->items[i].name, name);
            table->items[i].quantity = quantity;
            return;
        }
    }
    printf("Inventory is full, cannot add more items.\n");
}

// Function to check if inventory is sufficient for an item
int canUpdateInventory(HashTable *table, char *name, int quantity) {
    for (int i = 0; i < MAX_ITEMS; i++) {
        if (strcmp(table->items[i].name, name) == 0 && table->items[i].quantity >= quantity) {
            return 1;
        }
    }
    return 0;
}

// Function to update inventory when resources are dispatched
void updateInventory(HashTable *table, char *name, int quantity) {
    for (int i = 0; i < MAX_ITEMS; i++) {
        if (strcmp(table->items[i].name, name) == 0 && table->items[i].quantity >= quantity) {
            table->items[i].quantity -= quantity;
            return;
        }
    }
    printf("Not enough inventory to dispatch %s (%d requested).\n", name, quantity);
}

// Function to print the inventory
void printInventory(HashTable *table) {
    printf("\n--- Relief Inventory ---\n");
    int hasItems = 0;
    for (int i = 0; i < MAX_ITEMS; i++) {
        if (table->items[i].quantity > 0) {
            printf("%s: %d\n", table->items[i].name, table->items[i].quantity);
            hasItems = 1;
        }
    }
    if (!hasItems) {
        printf("No items in inventory.\n");
    }
}

// Function to print a disaster zone's details
void printZone(Zone *zone) {
    printf("Zone %d - %s: Severity: %d, Weather Factor: %d, Distance from Aid Center: %d km\n",
           zone->id, zone->name, zone->severity, zone->weatherFactor, zone->distanceFromAidCenter);
    printf("Required Aid Packages:\n");
    for (int i = 0; i < zone->numAidPackages; i++) {
        printf("  %s: %d\n", zone->aidPackages[i].itemName, zone->aidPackages[i].quantity);
    }
}

// Function to implement Max-Heap based on severity and weather factor
void heapify(Zone *zones[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && zones[left]->severity > zones[largest]->severity) {
        largest = left;
    }
    else if (left < n && zones[left]->severity == zones[largest]->severity &&
             zones[left]->weatherFactor < zones[largest]->weatherFactor) {
        largest = left;
    }

    if (right < n && zones[right]->severity > zones[largest]->severity) {
        largest = right;
    }
    else if (right < n && zones[right]->severity == zones[largest]->severity &&
             zones[right]->weatherFactor < zones[largest]->weatherFactor) {
        largest = right;
    }

    if (largest != i) {
        Zone *temp = zones[i];
        zones[i] = zones[largest];
        zones[largest] = temp;
        heapify(zones, n, largest);
    }
}

// Function to build the heap from an array of zones
void buildHeap(Zone *zones[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(zones, n, i);
    }
}

// Function to implement Dijkstra's Algorithm
void dijkstra(int graph[MAX_ZONES][MAX_ZONES], int src, int dist[MAX_ZONES], int prev[MAX_ZONES]) {
    int visited[MAX_ZONES] = {0};
    for (int i = 0; i < MAX_ZONES; i++) {
        dist[i] = INF;
        prev[i] = -1;
    }
    dist[src] = 0;

    for (int count = 0; count < MAX_ZONES - 1; count++) {
        int minDist = INF, u;
        for (int v = 0; v < MAX_ZONES; v++) {
            if (!visited[v] && dist[v] < minDist) {
                minDist = dist[v];
                u = v;
            }
        }

        visited[u] = 1;

        for (int v = 0; v < MAX_ZONES; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                prev[v] = u;
            }
        }
    }
}

// Function to display the shortest path from source to destination
void printShortestPath(int prev[MAX_ZONES], int dest, Zone zones[]) {
    if (prev[dest] == -1) {
        printf("No path to Zone %d - %s.\n", zones[dest].id, zones[dest].name);
        return;
    }
    printf("Path taken: ");
    int path[MAX_ZONES];
    int pathIndex = 0;
    while (dest != -1) {
        path[pathIndex++] = dest;
        dest = prev[dest];
    }
    for (int i = pathIndex - 1; i >= 0; i--) {
        printf("Zone %d - %s ", zones[path[i]].id, zones[path[i]].name);
        if (i > 0) printf("-> ");
    }
    printf("\n");
}

// Function to initialize the predefined zones and graph
void initializeZonesAndGraph(Zone zones[], int graph[MAX_ZONES][MAX_ZONES]) {
    // Initialize zones (Aid Center + 10 Pakistani cities)
    zones[0] = (Zone){0, "Aid Center", 0, 0, 0, {{0}}, 0};
    zones[1] = (Zone){1, "Karachi", 0, 0, 0, {{0}}, 0};
    zones[2] = (Zone){2, "Lahore", 0, 0, 0, {{0}}, 0};
    zones[3] = (Zone){3, "Islamabad", 0, 0, 0, {{0}}, 0};
    zones[4] = (Zone){4, "Peshawar", 0, 0, 450, {{0}}, 0};
    zones[5] = (Zone){5, "Quetta", 0, 0, 0, {{0}}, 0};
    zones[6] = (Zone){6, "Faisalabad", 0, 0, 0, {{0}}, 0};
    zones[7] = (Zone){7, "Multan", 0, 0, 0, {{0}}, 0};
    zones[8] = (Zone){8, "Hyderabad", 0, 0, 1100, {{0}}, 0};
    zones[9] = (Zone){9, "Rawalpindi", 0, 0, 0, {{0}}, 0};
    zones[10] = (Zone){10, "Gujranwala", 0, 0, 0, {{0}}, 0};

    // Initialize graph with distances (0 means no direct connection)
    // Aid Center (0) to Hyderabad and Peshawar only
    graph[0][8] = 1100; graph[8][0] = 1100; // Aid Center to Hyderabad
    graph[0][4] = 450; graph[4][0] = 450;   // Aid Center to Peshawar

    // Connections between cities (approximate distances in km)
    graph[1][8] = 150; graph[8][1] = 150;   // Karachi to Hyderabad
    graph[2][6] = 130; graph[6][2] = 130;   // Lahore to Faisalabad
    graph[2][9] = 270; graph[9][2] = 270;   // Lahore to Rawalpindi
    graph[2][10] = 70; graph[10][2] = 70;   // Lahore to Gujranwala
    graph[3][9] = 25; graph[9][3] = 25;     // Islamabad to Rawalpindi
    graph[3][4] = 180; graph[4][3] = 180;   // Islamabad to Peshawar
    graph[6][7] = 250; graph[7][6] = 250;   // Faisalabad to Multan
    graph[7][8] = 500; graph[8][7] = 500;   // Multan to Hyderabad
    graph[9][10] = 200; graph[10][9] = 200; // Rawalpindi to Gujranwala
    graph[4][5] = 600; graph[5][4] = 600;   // Peshawar to Quetta

    // Calculate shortest path distances from Aid Center to update distanceFromAidCenter
    int dist[MAX_ZONES], prev[MAX_ZONES];
    dijkstra(graph, 0, dist, prev);
    for (int i = 0; i < MAX_ZONES; i++) {
        zones[i].distanceFromAidCenter = (dist[i] == INF) ? 0 : dist[i];
    }
}

void disasterReliefSystem() {
    // Initialize predefined zones and graph
    Zone zones[MAX_ZONES];
    int graph[MAX_ZONES][MAX_ZONES] = {{0}};
    initializeZonesAndGraph(zones, graph);
    int numZones = MAX_ZONES; // All zones are predefined

    // Initialize queue for aid dispatch
    Queue q;
    initQueue(&q);

    // Initialize hash table for inventory
    HashTable inventory = {{0}};

    // Add initial items to the inventory
    addItem(&inventory, "Food Ration for 1 Person per day", 500);
    addItem(&inventory, "Medical Supplies for one Person", 200);
    addItem(&inventory, "Tent for 1 Family of 5", 100);

    int choice;

    do {
        // Display menu
        printf("\n--- Disaster Relief Coordination System ---\n");
        printf("1. View Inventory\n");
        printf("2. Add Aid Calls\n");
        printf("3. Process Aid Calls\n");
        printf("4. Restock Inventory\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printInventory(&inventory);
                break;
            case 2:
                {
                    // Display available zones
                    printf("\nAvailable Zones:\n");
                    for (int i = 1; i < MAX_ZONES; i++) { // Skip Aid Center (Zone 0)
                        printf("%d. %s\n", zones[i].id, zones[i].name);
                    }

                    Zone *newZone; // Declare pointer without initialization
                    int zoneId;

                    // Input zone number
                    printf("Enter zone number (1-10): ");
                    scanf("%d", &zoneId);
                    if (zoneId < 1 || zoneId > 10) {
                        printf("Invalid zone number. Must be between 1 and 10.\n");
                        break;
                    }

                    // Find the selected zone
                    int zoneIndex = -1;
                    for (int i = 0; i < MAX_ZONES; i++) {
                        if (zones[i].id == zoneId) {
                            zoneIndex = i;
                            break;
                        }
                    }
                    if (zoneIndex == -1) {
                        printf("Zone not found.\n");
                        break;
                    }
                    newZone = &zones[zoneIndex]; // Point to the selected zone

                    // Check if zone already has an aid call
                    if (newZone->numAidPackages > 0) {
                        printf("Zone %d - %s already has an active aid call.\n", newZone->id, newZone->name);
                        break;
                    }

                    // Input severity
                    printf("\nSelect disaster type (severity):\n");
                    printf("1. Tornado (Severity: 1)\n");
                    printf("2. Earthquake (Severity: 2)\n");
                    printf("3. Disease Outbreak (Severity: 3)\n");
                    printf("4. Flood (Severity: 4)\n");
                    printf("5. Fire (Severity: 5)\n");
                    printf("Enter choice (1-5): ");
                    int disasterChoice;
                    scanf("%d", &disasterChoice);
                    switch (disasterChoice) {
                        case 1: newZone->severity = 1; break;
                        case 2: newZone->severity = 2; break;
                        case 3: newZone->severity = 3; break;
                        case 4: newZone->severity = 4; break;
                        case 5: newZone->severity = 5; break;
                        default:
                            printf("Invalid disaster type. Defaulting to Tornado (Severity: 1).\n");
                            newZone->severity = 1;
                    }

                    // Input weather factor
                    printf("\nEnter weather factor (affects aid delivery difficulty):\n");
                    printf("  0 = Normal (clear conditions, no delays)\n");
                    printf("  1 = Rain (moderate delays due to wet conditions)\n");
                    printf("  2 = Snow (significant delays due to snow accumulation)\n");
                    printf("  3 = Storm (severe delays due to extreme weather)\n");
                    printf("Enter choice (0-3): ");
                    scanf("%d", &newZone->weatherFactor);
                    if (newZone->weatherFactor < 0 || newZone->weatherFactor > 3) {
                        printf("Invalid weather factor. Defaulting to Normal (0).\n");
                        newZone->weatherFactor = 0;
                    }

                    // Input aid packages
                    printf("\nSelect aid packages required (enter 0 to finish):\n");
                    while (newZone->numAidPackages < MAX_ITEMS) {
                        printInventory(&inventory);
                        printf("\nSelect item:\n");
                        printf("1. Food Ration for 1 Person per day\n");
                        printf("2. Medical Supplies for one Person\n");
                        printf("3. Tent for 1 Family of 5\n");
                        printf("0. Done adding items\n");
                        printf("Enter choice (0-3): ");
                        int itemChoice;
                        scanf("%d", &itemChoice);
                        if (itemChoice == 0) break;
                        if (itemChoice < 1 || itemChoice > 3) {
                            printf("Invalid item choice.\n");
                            continue;
                        }

                        printf("Enter quantity: ");
                        int quantity;
                        scanf("%d", &quantity);
                        if (quantity <= 0) {
                            printf("Quantity must be positive.\n");
                            continue;
                        }

                        char *itemName;
                        switch (itemChoice) {
                            case 1: itemName = "Food Ration for 1 Person per day"; break;
                            case 2: itemName = "Medical Supplies for one Person"; break;
                            case 3: itemName = "Tent for 1 Family of 5"; break;
                        }
                        strcpy(newZone->aidPackages[newZone->numAidPackages].itemName, itemName);
                        newZone->aidPackages[newZone->numAidPackages].quantity = quantity;
                        newZone->numAidPackages++;
                    }

                    printf("Aid call added for Zone %d - %s.\n", newZone->id, newZone->name);
                }
                break;
            case 3:
                {
                    printf("\nProcessing aid calls based on severity...\n");
                    int activeZones = 0;
                    for (int i = 1; i < MAX_ZONES; i++) {
                        if (zones[i].numAidPackages > 0) activeZones++;
                    }
                    if (activeZones == 0) {
                        printf("No aid calls to process.\n");
                        break;
                    }

                    // Sort zones by severity and weather factor using Max-Heap
                    Zone *zonePtrs[MAX_ZONES];
                    int ptrIndex = 0;
                    for (int i = 1; i < MAX_ZONES; i++) {
                        if (zones[i].numAidPackages > 0) {
                            zonePtrs[ptrIndex++] = &zones[i];
                        }
                    }
                    buildHeap(zonePtrs, ptrIndex);

                    // Enqueue zones for dispatch
                    for (int i = 0; i < ptrIndex; i++) {
                        enqueue(&q, zonePtrs[i]);
                    }

                    // Compute shortest paths from Aid Center
                    int dist[MAX_ZONES], prev[MAX_ZONES];
                    dijkstra(graph, 0, dist, prev);

                    // Track unprocessed zones
                    Zone *unprocessedZones[MAX_ZONES];
                    int numUnprocessed = 0;

                    // Dispatch aid
                    while (!isEmpty(&q)) {
                        Zone *zone = dequeue(&q);
                        int canDispatch = 1;
                        for (int i = 0; i < zone->numAidPackages; i++) {
                            if (!canUpdateInventory(&inventory, zone->aidPackages[i].itemName,
                                                    zone->aidPackages[i].quantity)) {
                                canDispatch = 0;
                                break;
                            }
                        }

                        if (canDispatch) {
                            printf("\nDispatching aid to: ");
                            printZone(zone);
                            printShortestPath(prev, zone->id, zones);
                            for (int i = 0; i < zone->numAidPackages; i++) {
                                printf("Dispatching %d units of %s\n",
                                       zone->aidPackages[i].quantity, zone->aidPackages[i].itemName);
                                updateInventory(&inventory, zone->aidPackages[i].itemName,
                                               zone->aidPackages[i].quantity);
                            }
                            zone->numAidPackages = 0; // Clear aid call after dispatch
                        } else {
                            printf("\nCannot dispatch aid to Zone %d - %s: Insufficient inventory.\n",
                                   zone->id, zone->name);
                            unprocessedZones[numUnprocessed++] = zone;
                        }
                    }

                    // Summary of unprocessed zones and inventory
                    if (numUnprocessed > 0) {
                        printf("\n--- Unprocessed Zones Due to Insufficient Inventory ---\n");
                        for (int i = 0; i < numUnprocessed; i++) {
                            printf("Zone %d - %s\n", unprocessedZones[i]->id, unprocessedZones[i]->name);
                        }
                        printf("Please restock inventory using option 4 or add more aid calls via option 2.\n");
                    } else {
                        printf("\nAll zones successfully processed.\n");
                    }
                    printf("\n--- Current Inventory ---\n");
                    printInventory(&inventory);
                }
                break;
            case 4:
                {
                    int itemChoice, quantity;
                    printf("\nSelect item to restock:\n");
                    printf("1. Food Ration for 1 Person per day\n");
                    printf("2. Medical Supplies for one Person\n");
                    printf("3. Tent for 1 Family of 5\n");
                    printf("Enter choice (1-3): ");
                    scanf("%d", &itemChoice);

                    if (itemChoice < 1 || itemChoice > 3) {
                        printf("Invalid item choice. Please select 1, 2, or 3.\n");
                        break;
                    }

                    printf("Enter quantity to add: ");
                    scanf("%d", &quantity);
                    if (quantity <= 0) {
                        printf("Quantity must be positive.\n");
                        break;
                    }

                    char *itemName;
                    switch (itemChoice) {
                        case 1: itemName = "Food Ration for 1 Person per day"; break;
                        case 2: itemName = "Medical Supplies for one Person"; break;
                        case 3: itemName = "Tent for 1 Family of 5"; break;
                    }
                    addItem(&inventory, itemName, quantity);
                    printf("Added %d units of %s to inventory.\n", quantity, itemName);
                }
                break;
            case 5:
                printf("Exiting the system.\n");
                break;
            default:
                printf("Invalid choice, please try again.\n");
        }
    } while (choice != 5);
}

int main() {
    disasterReliefSystem();
    return 0;
}

this is the code that you need to run the programe
